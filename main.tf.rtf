resource "aws-vpc" "myvpc"{
    cidr_block = var.cidr
}
resource "aws_subnet" "sub1"{
    vpc_id =aws_vpc.myvpc.id
    cidr_block = "10.0.0.0/24"
    availability_zone = "us-east-1a"
    map_public_id_on_launch= true

}
resource "aws_subnet" "sub2"{
    vpc_id =aws_vpc.myvpc.id
    cidr_block = "10.0.1.0/24"
    availability_zone = "us-east-1b"
    map_public_id_on_launch= true
    
}

resource "aws_internet_gateway" "igw" {
    vpc_id = aws_vpc.myvpc.id
  
}
resource "aws_route_table" "rt"{
    vpc_id=aws_vpc.myvpc.id
    route{
        cidr_block= "0.0.0.0/0"
        gateway_id= aws_internet_gateway.igw.id

    }
}
resource "aws_route_table_association" "rta1" {
    subnet_id      = aws_subnet.sub1.id
    route_table_id = aws_route_table.rt.id
}
resource "aws_route_table_association" "rta2" {
    subnet_id      = aws_subnet.sub2.id
    route_table_id = aws_route_table.rt.id
  }
resource "aws_security_group" "allow_tls" {
    name        = "websg"
    description = "Allow TLS inbound traffic"
    vpc_id      = aws_vpc.myvpc.id
  
    ingress {
      description      = "HTTP from VPC"
      from_port        = 80
      to_port          = 80
      protocol         = "tcp"
      cidr_blocks      = ["0.0.0.0/0"]
      
    }
    ingress {
        description      = "SSH"
        from_port        = 22
        to_port          = 22
        protocol         = "tcp"
        cidr_blocks      = ["0.0.0.0/0"]
        
      }
  
    egress {
      from_port        = 0
      to_port          = 0
      protocol         = "-1"
      cidr_blocks      = ["0.0.0.0/0"]
    }
    tag{
        name= "web-sg"
    }
    
  }
resource "aws_s3_bucket" "example" {
    bucket = "nitinpro"
}
resource "aws_s3_bucket_public_access_block" "example" {
    bucket = aws_s3_bucket.example.id
  
    block_public_acls       = true
    block_public_policy     = true
    ignore_public_acls      = true
    restrict_public_buckets = true
}
resource "aws_s3_bucket_acl" "example" {
  

  bucket = aws_s3_bucket.example.id
  acl    = "public-read"
}
resource "aws_instance" "web" {
    ami           = "ami-02a2af70a66af6dfb"
    instance_type = "t2.micro"
    vpc_security_group_ids=[aws_security_group.websg.id]
    subnet_id=aws_subnet.sub1.id
    user_data=base64encode(file("userdata.sh"))
}
resource "aws_instance" "web1" {
    ami           = "ami-02a2af70a66af6dfb"
    instance_type = "t2.micro"
    vpc_security_group_ids=[aws_security_group.websg.id]
    subnet_id=aws_subnet.sub2.id
    user_data=base64encode(file("userdata1.sh"))
}
resource "aws_lb" "myalb"{
    name               = "myalb"
    internal           = false
    load_balancer_type = "application"
    secuity_groups =[aws_security_group.websg.id]
    subnets= [aws_subnet.sub1.id ,aws_subnet.sub2.id ]
    tags={
        Name= "web2"
    }
}
resource "aws_lb_target_group" "tg" {
    name     = "mytg"
 port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.myvpc.id
    helth_check{
        path= "/"
        port= "trafffic-port"

    }
    
}
resource "aws_lb_target_group_attachment" "test" {
    target_group_arn = aws_lb_target_group.tg.arn
    target_id        = aws_instance.web1.id
    port             = 80
}
resource "aws_lb_target_group_attachment" "test" {
    target_group_arn = aws_lb_target_group.tg.arn
    target_id        = aws_instance.web.id
    port             = 80
}
resource "aws_lb_listener" "listener"{
    load_balancer_arn=aws_lb.myalb.arn
    port= 80
    protocol= "HTTP"
    action {
        type             = "forward"
        target_group_arn = aws_lb_target_group.tg.arn
      }
}
output "loadbalancerdns"{
    value= aws_lb.myalb.dns_name
}
